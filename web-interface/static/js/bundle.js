document.addEventListener('DOMContentLoaded',function(){initializeComponents();if(window.location.pathname==='/'){loadDashboardStats();}
document.body.classList.add('fade-in');});function initializeComponents(){initializeNavbar();initializeNotifications();initializeFormValidation();initializeTooltips();}
function initializeNavbar(){const $navbarBurgers=Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'),0);if($navbarBurgers.length>0){$navbarBurgers.forEach(el=>{el.addEventListener('click',()=>{const target=el.dataset.target;const $target=document.getElementById(target);el.classList.toggle('is-active');$target.classList.toggle('is-active');});});}
highlightCurrentPage();}
function highlightCurrentPage(){const currentPath=window.location.pathname;const navItems=document.querySelectorAll('.navbar-item');navItems.forEach(item=>{if(item.getAttribute('href')===currentPath){item.classList.add('is-active');}});}
function initializeNotifications(){const notifications=document.querySelectorAll('.notification.is-success');notifications.forEach(notification=>{setTimeout(()=>{notification.style.opacity='0';setTimeout(()=>{notification.remove();},300);},5000);});}
function initializeFormValidation(){const forms=document.querySelectorAll('form[data-validate]');forms.forEach(form=>{form.addEventListener('submit',function(e){if(!validateForm(this)){e.preventDefault();}});const inputs=form.querySelectorAll('input, textarea, select');inputs.forEach(input=>{input.addEventListener('blur',function(){validateField(this);});});});}
function validateForm(form){let isValid=true;const inputs=form.querySelectorAll('input[required], textarea[required], select[required]');inputs.forEach(input=>{if(!validateField(input)){isValid=false;}});return isValid;}
function validateField(field){const value=field.value.trim();const fieldContainer=field.closest('.field');let errorMessage='';const existingError=fieldContainer.querySelector('.help.is-danger');if(existingError){existingError.remove();}
if(field.hasAttribute('required')&&!value){errorMessage='此欄位為必填';}
if(field.type==='email'&&value&&!isValidEmail(value)){errorMessage='請輸入有效的電子郵件地址';}
if(field.type==='number'&&value){const min=field.getAttribute('min');const max=field.getAttribute('max');const num=parseFloat(value);if(min&&num<parseFloat(min)){errorMessage=`值不能小於 ${min}`;}else if(max&&num>parseFloat(max)){errorMessage=`值不能大於 ${max}`;}}
if(field.hasAttribute('pattern')&&value){const pattern=new RegExp(field.getAttribute('pattern'));if(!pattern.test(value)){errorMessage=field.getAttribute('title')||'格式不正確';}}
if(errorMessage){field.classList.add('is-danger');const helpElement=document.createElement('p');helpElement.className='help is-danger';helpElement.textContent=errorMessage;fieldContainer.appendChild(helpElement);return false;}else{field.classList.remove('is-danger');field.classList.add('is-success');return true;}}
function isValidEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email);}
function initializeTooltips(){const tooltipElements=document.querySelectorAll('[data-tooltip]');tooltipElements.forEach(element=>{element.addEventListener('mouseenter',showTooltip);element.addEventListener('mouseleave',hideTooltip);});}
function showTooltip(event){const element=event.target;const tooltipText=element.getAttribute('data-tooltip');const tooltip=document.createElement('div');tooltip.className='tooltip';tooltip.textContent=tooltipText;tooltip.style.position='absolute';tooltip.style.backgroundColor='#363636';tooltip.style.color='white';tooltip.style.padding='0.5rem';tooltip.style.borderRadius='4px';tooltip.style.fontSize='0.875rem';tooltip.style.zIndex='1000';tooltip.style.pointerEvents='none';document.body.appendChild(tooltip);const rect=element.getBoundingClientRect();tooltip.style.left=rect.left+(rect.width/2)-(tooltip.offsetWidth/2)+'px';tooltip.style.top=rect.top-tooltip.offsetHeight-8+'px';element.tooltipElement=tooltip;}
function hideTooltip(event){const element=event.target;if(element.tooltipElement){element.tooltipElement.remove();delete element.tooltipElement;}}
function loadDashboardStats(){fetch('/api/stats').then(response=>response.json()).then(data=>{if(data.status==='success'){updateStatsDisplay(data.data);}}).catch(error=>{console.error('載入統計資料失敗:',error);});}
function updateStatsDisplay(stats){const totalChallenges=document.querySelector('[data-stat="total-challenges"]');const totalPoints=document.querySelector('[data-stat="total-points"]');if(totalChallenges){animateNumber(totalChallenges,stats.total_challenges);}
if(totalPoints){animateNumber(totalPoints,stats.total_points);}}
function animateNumber(element,targetValue){const startValue=0;const duration=1000;const startTime=performance.now();function update(currentTime){const elapsed=currentTime-startTime;const progress=Math.min(elapsed/duration,1);const currentValue=Math.floor(startValue+(targetValue-startValue)*progress);element.textContent=currentValue;if(progress<1){requestAnimationFrame(update);}}
requestAnimationFrame(update);}
function showLoading(element,text='載入中...'){const originalContent=element.innerHTML;element.innerHTML=`<span class="icon"><i class="fas fa-spinner fa-pulse"></i></span><span>${text}</span>`;element.disabled=true;element.originalContent=originalContent;}
function hideLoading(element){if(element.originalContent){element.innerHTML=element.originalContent;element.disabled=false;delete element.originalContent;}}
function showNotification(message,type='info',duration=5000){const notification=document.createElement('div');notification.className=`notification is-${type}`;notification.innerHTML=`<button class="delete"></button>${message}`;const container=document.querySelector('.main-content .container');if(container){container.insertBefore(notification,container.firstChild);}
const deleteButton=notification.querySelector('.delete');deleteButton.addEventListener('click',()=>{notification.remove();});if(duration>0){setTimeout(()=>{if(notification.parentNode){notification.remove();}},duration);}}
async function apiRequest(url,options={}){const defaultOptions={headers:{'Content-Type':'application/json',}};try{const response=await fetch(url,{...defaultOptions,...options});const data=await response.json();if(!response.ok){throw new Error(data.message||'請求失敗');}
return data;}catch(error){console.error('API 請求錯誤:',error);showNotification(`錯誤:${error.message}`,'danger');throw error;}}
function formatDate(date){return new Intl.DateTimeFormat('zh-TW',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit'}).format(new Date(date));}
function formatFileSize(bytes){if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];}
function debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout=setTimeout(later,wait);};}
function throttle(func,limit){let inThrottle;return function(){const args=arguments;const context=this;if(!inThrottle){func.apply(context,args);inThrottle=true;setTimeout(()=>inThrottle=false,limit);}};}
window.CTF={showLoading,hideLoading,showNotification,apiRequest,formatDate,formatFileSize,debounce,throttle};