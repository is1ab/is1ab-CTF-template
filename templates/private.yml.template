# =============================================================================
# CTF Challenge Private Configuration Template
# =============================================================================
# 此檔案包含完整的題目配置，包括敏感資訊如 flag 和解題步驟
# 這些資訊不會在 public.yml 中出現，僅供內部開發和管理使用

# =============================================================================
# 基本資訊 (Basic Information)
# =============================================================================

# 題目標題 - 顯示給參賽者的題目名稱
title: "範例題目名稱"

# 作者 - 題目創建者
author: "YourName"

# 難度等級 - 影響分數和排序
# 可選值: baby, easy, middle, hard, impossible
difficulty: "easy"

# 分類 - 題目所屬的技術領域
# 可選值: web, pwn, reverse, crypto, forensic, misc, general
category: "web"

# 題目描述 - 提供給參賽者的題目說明
description: |
  這是一個範例題目的描述。
  可以使用多行文字來詳細說明題目背景、目標和要求。
  
  參賽者需要：
  1. 分析提供的檔案或服務
  2. 找出安全漏洞
  3. 利用漏洞獲取 flag

# =============================================================================
# 題目配置 (Challenge Configuration)
# =============================================================================

# 題目類型 - 決定部署和分發方式
# 可選值:
# - static_attachment: 靜態附件，提供檔案下載
# - static_container: 靜態容器，共享服務實例
# - dynamic_attachment: 動態附件，每隊獲得不同檔案
# - dynamic_container: 動態容器，每隊獨立服務實例
# - nc_challenge: 通過 netcat 連線的題目
challenge_type: "static_container"

# 是否提供原始碼
source_code_provided: false

# 提供給參賽者的檔案列表
files:
  - "challenge.zip"
  - "source.tar.gz"

# 開發狀態
# 可選值: planning, developing, testing, completed, deployed
status: "developing"

# 分數 - 題目完成後獲得的分數
points: 100

# 標籤 - 用於分類和搜尋
tags:
  - "web"
  - "sql_injection"
  - "authentication"
  - "beginner"

# 創建時間
created_at: "2024-01-01T00:00:00"

# =============================================================================
# 部署資訊 (Deployment Information)
# =============================================================================

deploy_info:
  # 服務端口 (如果需要)
  port: 8080
  
  # 服務 URL (部署後填入)
  url: "https://example.challenge.ctf"
  
  # 是否需要構建
  requires_build: true
  
  # NC 題目特殊配置 (僅 nc_challenge 需要)
  nc_port: 9999
  timeout: 60
  connection_type: "nc"
  
  # 資源限制
  resources:
    memory: "256Mi"
    cpu: "100m"
  
  # 環境變數
  environment:
    DATABASE_URL: "sqlite:///app.db"
    DEBUG: "false"

# =============================================================================
# 多階段提示系統 (Multi-level Hints System)
# =============================================================================

hints:
  # 第一階段提示 (通常免費)
  - level: 1
    cost: 0
    content: |
      這是第一個提示，通常是免費的。
      應該引導參賽者思考正確的方向，但不要透露太多細節。
      
      提示：檢查應用程式的登入功能是否存在常見漏洞。

  # 第二階段提示 (消耗少量分數)
  - level: 2
    cost: 10
    content: |
      這是第二個提示，需要消耗一些分數。
      可以提供更具體的技術線索。
      
      提示：嘗試在登入表單中使用 SQL injection 技術，
      注意觀察錯誤訊息和回應時間的變化。

  # 第三階段提示 (消耗較多分數)
  - level: 3
    cost: 25
    content: |
      這是第三個提示，消耗較多分數。
      可以給出關鍵的技術步驟或工具建議。
      
      提示：使用 sqlmap 工具掃描登入端點：
      sqlmap -u "https://target/login" --data "username=test&password=test" --risk 3

  # 第四階段提示 (僅在必要時提供)
  - level: 4
    cost: 50
    content: |
      最後階段的提示，幾乎等於給出答案。
      只有在題目特別困難時才需要提供。
      
      提示：利用 UNION SELECT 查詢獲取管理員密碼：
      ' UNION SELECT username, password FROM users WHERE role='admin'--

# =============================================================================
# 敏感資訊 (Sensitive Information - 不會出現在 public.yml 中)
# =============================================================================

# 實際的 flag
flag: "is1abCTF{example_flag_here_replace_with_actual}"

# Flag 獲取說明
flag_description: |
  Flag 位於資料庫的 admin 用戶記錄中。
  參賽者需要通過 SQL injection 漏洞繞過身份驗證，
  然後查詢資料庫獲取管理員的 flag。

# 詳細解題步驟
solution_steps:
  - |
    第一步：發現 SQL Injection 漏洞
    在登入表單的 username 欄位中輸入單引號 (') 
    觀察到錯誤訊息洩露了 SQL 查詢結構
    
  - |
    第二步：測試注入點
    使用 payload: admin' OR '1'='1'-- 
    成功繞過身份驗證進入管理面板
    
  - |
    第三步：獲取資料庫結構
    使用 UNION SELECT 查詢獲取表名和欄位名：
    ' UNION SELECT table_name, column_name FROM information_schema.columns--
    
  - |
    第四步：提取 flag
    查詢 users 表獲取管理員的 flag：
    ' UNION SELECT username, flag FROM users WHERE role='admin'--
    
  - |
    第五步：驗證 flag
    獲得的 flag 格式應為：is1abCTF{actual_flag_content}

# 內部開發筆記
internal_notes: |
  開發筆記：
  - 資料庫使用 SQLite，位於 /app/database.db
  - 登入邏輯在 app.py 的 login() 函數中
  - 故意使用字串拼接而非參數化查詢來創造 SQL injection 漏洞
  - 管理面板需要驗證 role='admin' 才能訪問
  
  測試要點：
  - 確保所有 SQL injection payloads 都能正常工作
  - 檢查錯誤訊息不會洩露過多資訊
  - 驗證 flag 格式正確且唯一
  
  已知問題：
  - 某些特殊字符可能導致應用程式崩潰
  - 需要添加更多錯誤處理來提高穩定性

# =============================================================================
# 學習目標與技能要求 (Learning Objectives & Skills)
# =============================================================================

learning_objectives:
  - "理解 SQL injection 攻擊的基本原理"
  - "學習識別和利用 Web 應用程式中的注入漏洞"
  - "掌握使用 sqlmap 等工具進行自動化測試"
  - "了解安全的資料庫查詢實作方式"

required_skills:
  - "基礎 SQL 語法知識"
  - "Web 應用程式基本概念"
  - "HTTP 請求和回應分析"
  - "命令列工具使用"

recommended_tools:
  - "Burp Suite / OWASP ZAP (Web 代理工具)"
  - "sqlmap (SQL injection 自動化工具)"
  - "curl / wget (命令列 HTTP 客戶端)"
  - "瀏覽器開發者工具"

# =============================================================================
# 測試與品質保證 (Testing & Quality Assurance)
# =============================================================================

testing:
  # 測試案例
  test_cases:
    - name: "基本 SQL injection 測試"
      description: "驗證基本的 SQL injection payload 是否有效"
      payload: "admin' OR '1'='1'--"
      expected_result: "成功繞過登入驗證"
      
    - name: "UNION SELECT 測試"
      description: "驗證可以使用 UNION SELECT 查詢資料庫"
      payload: "' UNION SELECT username, password FROM users--"
      expected_result: "顯示資料庫中的用戶資訊"
      
    - name: "Flag 提取測試"
      description: "驗證可以成功獲取 flag"
      payload: "' UNION SELECT flag, role FROM users WHERE role='admin'--"
      expected_result: "顯示完整的 flag"
  
  # 已知的正確解法
  verified_solutions:
    - method: "手動 SQL injection"
      time_estimate: "15-30 分鐘"
      difficulty: "初級"
      
    - method: "使用 sqlmap 自動化"
      time_estimate: "5-10 分鐘"
      difficulty: "初級"
  
  # 測試狀態
  last_tested: "2024-01-01T00:00:00"
  tested_by: "TestTeam"
  test_result: "passed"

# =============================================================================
# 附加資訊 (Additional Information)
# =============================================================================

# 參考資料和學習資源
references:
  - title: "OWASP SQL Injection Prevention Cheat Sheet"
    url: "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
    
  - title: "PortSwigger Web Security Academy - SQL injection"
    url: "https://portswigger.net/web-security/sql-injection"
    
  - title: "sqlmap User Manual"
    url: "https://github.com/sqlmapproject/sqlmap/wiki/Usage"

# 版本歷史
version_history:
  - version: "1.0"
    date: "2024-01-01"
    changes: "初始版本"
    author: "YourName"
    
  - version: "1.1"
    date: "2024-01-02"
    changes: "修復 SQL 語法錯誤，增加錯誤處理"
    author: "YourName"

# 相關題目
related_challenges:
  - "SQL Injection Basics"
  - "Advanced SQL Injection"
  - "Blind SQL Injection"

# 元數據
metadata:
  estimated_solve_time: "20-45 分鐘"
  first_blood_bonus: 50
  max_attempts: -1  # -1 表示無限制
  cooldown_period: 0  # 秒，提交間隔限制
  
# =============================================================================
# 注意事項
# =============================================================================
# 
# 1. 此檔案包含敏感資訊，不應提交到公開的 Git 倉庫
# 2. public.yml 會自動從此檔案生成，移除敏感欄位
# 3. 所有以 '_description', 'solution_', 'internal_' 開頭的欄位都是敏感的
# 4. flag 必須遵循組織的 flag 格式標準
# 5. 在正式部署前，請確保所有 TODO 項目都已完成
# 
# =============================================================================